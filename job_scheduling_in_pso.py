# -*- coding: utf-8 -*-
"""Job scheduling in PSO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Me9R_aTGS_fFFAiZAljDToxXs_v-izg
"""

import random

jobs = [2, 14, 4, 16, 6, 5, 3, 8]
num_machines = 3

def fitness(schedule):
    machine_times = [0] * num_machines
    for job_index, machine in enumerate(schedule):
        machine_times[machine] += jobs[job_index]
    return max(machine_times)

class Particle:
    def __init__(self):

        self.position = [random.randint(0, num_machines - 1) for _ in jobs]
        self.best_position = list(self.position)
        self.best_value = fitness(self.position)
        self.velocity = [0] * len(jobs)

    def update_velocity(self, global_best, w, c1, c2):
        for i in range(len(self.position)):
            r1, r2 = random.random(), random.random()


            cognitive = c1 * r1 * (self.best_position[i] - self.position[i])
            social = c2 * r2 * (global_best[i] - self.position[i])

            self.velocity[i] = int(round(w * self.velocity[i] + cognitive + social))

    def update_position(self):
        for i in range(len(self.position)):

            self.position[i] += self.velocity[i]
            if self.position[i] < 0:
                self.position[i] = 0
            elif self.position[i] >= num_machines:
                self.position[i] = num_machines - 1

        val = fitness(self.position)
        if val < self.best_value:
            self.best_value = val
            self.best_position = list(self.position)

def pso(num_particles=10, max_iter=50, w=0.5, c1=1.5, c2=1.5):
    swarm = [Particle() for _ in range(num_particles)]
    global_best = min(swarm, key=lambda p: p.best_value)
    gbest_position = list(global_best.best_position)
    gbest_value = global_best.best_value

    for _ in range(max_iter):
        for particle in swarm:
            particle.update_velocity(gbest_position, w, c1, c2)
            particle.update_position()

        current_best = min(swarm, key=lambda p: p.best_value)
        if current_best.best_value < gbest_value:
            gbest_position = list(current_best.best_position)
            gbest_value = current_best.best_value

    return gbest_position, gbest_value


best_schedule, best_makespan = pso()
print("Best Schedule (jobâ†’machine):", best_schedule)
print("Minimum Makespan:", best_makespan)